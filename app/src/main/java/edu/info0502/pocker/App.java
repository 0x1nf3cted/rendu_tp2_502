/*
 * This source file was generated by the Gradle 'init' task
 */

package edu.info0502.pocker;

import java.util.List;
import java.util.ArrayList;


public class App {

    // une fonction pour afficher le talon
      private static void afficherTalon(Talon talon) {
        System.out.println("\n=== Contenu du talon ===");
        System.out.println(talon);
        System.out.println("Nombre de cartes restantes: " + talon.nombreCartes());
        System.out.println("========================\n");
    }

    // afficher une main
    private static void afficherMain(String nomJoueur, Main main) {
        System.out.println(nomJoueur + ": " + main);
        System.out.println("Combinaison: " + main.evaluerMain());
        System.out.println();
    }

    // création et affichage du talon
    private static void testCreationTalon() {
        System.out.println("\n~~~ Test de création du talon ~~~");
        Talon talon = new Talon(1);
        afficherTalon(talon);
    }

    // évaluation de différentes mains
    private static void testEvaluationMains() {
        System.out.println("\n~~~ Test d'évaluation des mains ~~~");
        
        // une quinte flush royale
        Main quinteFlushRoyale = new Main();
        quinteFlushRoyale.ajouterCarte(new Carte(Couleur.COEUR, Valeur.DIX));
        quinteFlushRoyale.ajouterCarte(new Carte(Couleur.COEUR, Valeur.VALET));
        quinteFlushRoyale.ajouterCarte(new Carte(Couleur.COEUR, Valeur.DAME));
        quinteFlushRoyale.ajouterCarte(new Carte(Couleur.COEUR, Valeur.ROI));
        quinteFlushRoyale.ajouterCarte(new Carte(Couleur.COEUR, Valeur.AS));
        afficherMain("Quinte Flush Royale", quinteFlushRoyale);

        // un carré
        Main carre = new Main();
        carre.ajouterCarte(new Carte(Couleur.COEUR, Valeur.AS));
        carre.ajouterCarte(new Carte(Couleur.CARREAU, Valeur.AS));
        carre.ajouterCarte(new Carte(Couleur.PIQUE, Valeur.AS));
        carre.ajouterCarte(new Carte(Couleur.TREFLE, Valeur.AS));
        carre.ajouterCarte(new Carte(Couleur.COEUR, Valeur.ROI));
        afficherMain("Carré", carre);

        // un full
        Main full = new Main();
        full.ajouterCarte(new Carte(Couleur.COEUR, Valeur.ROI));
        full.ajouterCarte(new Carte(Couleur.CARREAU, Valeur.ROI));
        full.ajouterCarte(new Carte(Couleur.PIQUE, Valeur.ROI));
        full.ajouterCarte(new Carte(Couleur.TREFLE, Valeur.DAME));
        full.ajouterCarte(new Carte(Couleur.COEUR, Valeur.DAME));
        afficherMain("Full", full);
    }

    // Jeu d'essais: Simulation d'une partie à 4 joueurs
    private static void simulerPartieQuatreJoueurs() {

        System.out.println("\n~~~ Jeu d'essais: Simulation d'une partie à 4 joueurs ~~~");
        
        // La mise en place d’un talon
        Talon talon = new Talon(1);
        talon.melanger();
        
        // La création  des mains de joueurs
        Main[] mains = new Main[4];
        for (int i = 0; i < 4; i++) {
            mains[i] = new Main();
        }
        
        // Distribution des cartes une par une
        for (int carte = 0; carte < 5; carte++) {
            for (int joueur = 0; joueur < 4; joueur++) {
                // ajouter la première carte du talon à la main
                mains[joueur].ajouterCarte(talon.tirerCarte());
            }
        }
        
        // Évaluation des mains
        for (int i = 0; i < 4; i++) {
            afficherMain("Joueur " + (i + 1), mains[i]);
        }
        
        // Détermination du gagnant
        int gagnant = 0;
        for (int i = 1; i < 4; i++) {
            if (mains[i].comparerAvec(mains[gagnant]) > 0) {
                gagnant = i;
            }
        }
        
        System.out.println("Le joueur " + (gagnant + 1) + " gagne avec " + 
                          mains[gagnant].evaluerMain());
    }

    // Test de comparaison de mains
    private static void testComparaisonMains() {
        System.out.println("\n=== Test de comparaison des mains ===");
        
        // Création de deux mains à comparer
        Main main1 = new Main();
        main1.ajouterCarte(new Carte(Couleur.COEUR, Valeur.AS));
        main1.ajouterCarte(new Carte(Couleur.CARREAU, Valeur.AS));
        main1.ajouterCarte(new Carte(Couleur.COEUR, Valeur.ROI));
        main1.ajouterCarte(new Carte(Couleur.CARREAU, Valeur.ROI));
        main1.ajouterCarte(new Carte(Couleur.COEUR, Valeur.DAME));

        Main main2 = new Main();
        main2.ajouterCarte(new Carte(Couleur.PIQUE, Valeur.AS));
        main2.ajouterCarte(new Carte(Couleur.TREFLE, Valeur.AS));
        main2.ajouterCarte(new Carte(Couleur.PIQUE, Valeur.DAME));
        main2.ajouterCarte(new Carte(Couleur.TREFLE, Valeur.DAME));
        main2.ajouterCarte(new Carte(Couleur.PIQUE, Valeur.VALET));

        afficherMain("Main 1", main1);
        afficherMain("Main 2", main2);

        int resultat = main1.comparerAvec(main2);
        if (resultat > 0) {
            System.out.println("Main 1 gagne!");
        } else if (resultat < 0) {
            System.out.println("Main 2 gagne!");
        } else {
            System.out.println("Égalité!");
        }
    }


    public static void main(String[] args) {
        // exécution de tous les tests de Jeux d’essais
        testCreationTalon();
        testEvaluationMains();
        testComparaisonMains();
        simulerPartieQuatreJoueurs();

        // exécution des tests de Texas Hol'em
        PokerHoldem partie = new PokerHoldem(4);
        partie.demarrerPartie();

    }
}
